///* ========================================================================
//   #MIXINS
//   ======================================================================== */

$SEPARATOR_MEDIA: '\\@';
$SEPARATOR_VALUE_START: '\\(';
$SEPARATOR_VALUE_END: '\\)';

//*  Private mixins
//   ======================================================================== */

/// Mixin to output media queries.
/// @access private
/// @requires {function} breakpoint-get
/// @requires {function} breakpoint-is-up
/// @requires {function} breakpoint-is-down
/// @requires {function} breakpoint-get-down
/// @requires {variable} BREAKPOINT_DEFAULT_LABEL
/// @param {String} $key - Breakpoint key
@mixin breakpoint($key) {
  @if $key == $BREAKPOINT_DEFAULT_LABEL {
    @content;
  } @else {
    $breakpoint-value: breakpoint-get($key);

    @if $breakpoint-value {
      @if breakpoint-is-up($key) {
        @media (min-width: #{$breakpoint-value}) {
          @content;
        }
      } @else if breakpoint-is-down($key) {
        @media (max-width: #{$breakpoint-value}) {
          @content;
        }
      } @else {
        $breakpoint-lower-value: breakpoint-get-down($key);

        @if $breakpoint-lower-value {
          @media (max-width: #{$breakpoint-value}) and (min-width: #{$breakpoint-lower-value}) {
            @content;
          }
        } @else {
          @media (max-width: #{$breakpoint-value}) {
            @content;
          }
        }
      }
    }
  }
}

/// Mixin to output margins in the same direction.
/// @access private
/// @requires {variable} vertical-margin-direction
/// @throws Make sure that `#{$vertical-margin-direction}` equals `top` or `bottom` in `$vertical-margin-direction: #{$vertical-margin-direction}` variable.
@mixin vertical-margins {
  @if $vertical-margin-direction == 'top' {
    margin-top: var(--spacer-base);

    @at-root :first-child {
      margin-top: 0;
    }
  } @else if $vertical-margin-direction == 'bottom' {
    margin-bottom: var(--spacer-base);

    @at-root :last-child {
      margin-bottom: 0;
    }
  } @else if $vertical-margin-direction {
    @warn 'Make sure that `#{$vertical-margin-direction}` equals `top` or `bottom` in `$vertical-margin-direction: #{$vertical-margin-direction}` variable.';
  }
}

//*  Private mixins to output CSS variables (Custom Properties)
//   ======================================================================== */

/// Mixin to output color variables.
/// @access private
/// @requires {variable} colors
/// @throws Make sure that `#{$value}` is a color or a CSS variable in `$colors: #{$colors}` map.
@mixin var-colors {
  @each $key, $value in $colors {
    @if type-of($value) == 'color' or (type-of($value) == 'string' and str-index($value, 'var(--')) {
      --color-#{$key}: #{$value};
    } @else if $value {
      @warn 'Make sure that `#{$value}` is a color or a CSS variable in `$colors: #{$colors}` map.';
    }
  }
}

/// Mixin to output font weight variables.
/// @access private
/// @requires {variable} font-weights
/// @throws Make sure that `#{$value}` is a number or a CSS variable in `$font-weights: #{$font-weights}` map.
@mixin var-font-weights {
  @each $key, $value in $font-weights {
    @if type-of($value) == 'number' or (type-of($value) == 'string' and str-index($value, 'var(--')) {
      --font-weight-#{$key}: #{$value};
    } @else if $value {
      @warn 'Make sure that `#{$value}` is a number or a CSS variable in `$font-weights: #{$font-weights}` map.';
    }
  }
}

/// Mixin to output font size variables (and line height, if it exists).
/// @access private
/// @requires {variable} font-sizes
/// @param {String} $key          - Font size key
/// @param {List | Number} $value - Font size value
/// @throws Make sure that `#{$value}` is a number, a CSS variable or a list in `$font-sizes: #{$font-sizes}` map.
/// @throws Make sure that `#{$font-size-value}` is a number or a CSS variable in `$font-sizes: #{$font-sizes}` map.
/// @throws Make sure that `#{$line-height-value}` is a number or a CSS variable in `$font-sizes: #{$font-sizes}` map.
@mixin var-rhythm($key, $value) {
  @if type-of($value) ==
    'number' or
    (type-of($value) == 'string' and str-index($value, 'var(--')) or
    type-of($value) ==
    'list'
  {
    @if type-of($value) == 'list' {
      $font-size-value: nth($value, 1);
      $line-height-value: nth($value, 2);

      @if type-of($font-size-value) ==
        'number' or
        (type-of($font-size-value) == 'string' and str-index($font-size-value, 'var(--'))
      {
        --font-size-#{$key}: #{$font-size-value};
      } @else if $font-size-value {
        @warn 'Make sure that `#{$font-size-value}` is a number or a CSS variable in `$font-sizes: #{$font-sizes}` map.';
      }

      @if type-of($line-height-value) ==
        'number' or
        (type-of($line-height-value) == 'string' and str-index($line-height-value, 'var(--'))
      {
        --line-height-#{$key}: #{$line-height-value};
      } @else if $line-height-value {
        @warn 'Make sure that `#{$line-height-value}` is a number or a CSS variable in `$font-sizes: #{$font-sizes}` map.';
      }
    } @else {
      --font-size-#{$key}: #{$value};
    }
  } @else if $value {
    @warn 'Make sure that `#{$value}` is a number, a CSS variable or a list in `$font-sizes: #{$font-sizes}` map.';
  }
}

/// Mixin to output font size variables (and line height, if it exists).
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} var-rhythm
/// @requires {variable} font-sizes
/// @throws Make sure that `#{$value}` is a number, a CSS variable, a list or a map in `$font-sizes: #{$font-sizes}` map.
@mixin var-font-sizes {
  @each $key, $value in $font-sizes {
    @if type-of($value) ==
      'number' or
      (type-of($value) == 'string' and str-index($value, 'var(--')) or
      type-of($value) ==
      'list' or
      type-of($value) ==
      'map'
    {
      @if type-of($value) == 'map' {
        @each $map-key, $map-value in $value {
          @include breakpoint($map-key) {
            @include var-rhythm($key, $map-value);
          }
        }
      } @else {
        @include var-rhythm($key, $value);
      }
    } @else if $value {
      @warn 'Make sure that `#{$value}` is a number, a CSS variable, a list or a map in `$font-sizes: #{$font-sizes}` map.';
    }
  }
}

/// Mixin to output font family variables.
/// @access private
/// @requires {variable} font-families
/// @throws Make sure that `#{$value}` is a string or a CSS variable in `$font-families: #{$font-families}` map.
@mixin var-font-families {
  @each $key, $value in $font-families {
    @if type-of($value) == 'string' {
      --font-family-#{$key}: #{$value};
    } @else if $value {
      @warn 'Make sure that `#{$value}` is a string or a CSS variable in `$font-families: #{$font-families}` map.';
    }
  }
}

/// Mixin to output sizing variables.
/// @access private
/// @requires {variable} sizes
/// @throws Make sure that `#{$value}` is a number, a CSS variable or equals `auto` in `$sizes: #{$sizes}` map.
@mixin var-sizing {
  @each $key, $value in $sizes {
    @if type-of($value) == 'number' or $value == 'auto' or (type-of($value) == 'string' and str-index($value, 'var(--'))
    {
      --size-#{$key}: #{$value};
    } @else if $value {
      @warn 'Make sure that `#{$value}` is a number, a CSS variable or equals `auto` in `$sizes: #{$sizes}` map.';
    }
  }
}

/// Mixin to output spacing variables.
/// @access private
/// @requires {variable} spacers
/// @throws Make sure that `#{$value}` is a number, a CSS variable or equals `auto` in `$spacers: #{$spacers}` map.
@mixin var-spacing {
  @each $key, $value in $spacers {
    @if type-of($value) == 'number' or $value == 'auto' or (type-of($value) == 'string' and str-index($value, 'var(--'))
    {
      --spacer-#{$key}: #{$value};
    } @else if $value {
      @warn 'Make sure that `#{$value}` is a number, a CSS variable or equals `auto` in `$spacers: #{$spacers}` map.';
    }
  }
}

/// Mixin to output container max width variable.
/// @access private
/// @requires {variable} container-max-width
/// @throws Make sure that `#{$container-max-width}` is a number or a CSS variable in `$container-max-width: #{$container-max-width}` variable.
@mixin var-container-max-width {
  @if type-of($container-max-width) ==
    'number' or
    (type-of($container-max-width) == 'string' and str-index($container-max-width, 'var(--'))
  {
    --container-max-width: #{$container-max-width};
  } @else {
    @warn 'Make sure that `#{$container-max-width}` is a number or a CSS variable in `$container-max-width: #{$container-max-width}` variable.';
  }
}

/// Mixin to output container side margin variables.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {variable} container-side-margin
/// @throws Make sure that `#{$value}` is a number or a CSS variable in `$container-side-margin: #{$container-side-margin}` map.
@mixin var-container-side-margin {
  @each $key, $value in $container-side-margin {
    @if type-of($value) == 'number' or (type-of($value) == 'string' and str-index($value, 'var(--')) {
      @include breakpoint($key) {
        --container-side-margin: #{$value};
      }
    } @else if $value {
      @warn 'Make sure that `#{$value}` is a number or a CSS variable in `$container-side-margin: #{$container-side-margin}` map.';
    }
  }
}

/// Mixin to output column count variable.
/// @access private
/// @requires {variable} column-count
/// @throws Make sure that `#{$column-count}` is a number in `$column-count: #{$column-count}` variable.
@mixin var-column-count {
  @if type-of($column-count) == 'number' and unitless($column-count) {
    --column-count: #{$column-count};
  } @else {
    @warn 'Make sure that `#{$column-count}` is a number in `$column-count: #{$column-count}` variable.';
  }
}

/// Mixin to output column gap variables.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {variable} column-gap
/// @throws Make sure that `#{$value}` is a number or a CSS variable in `$column-gap: #{$column-gap}` map.
@mixin var-column-gap {
  @each $key, $value in $column-gap {
    @if type-of($value) == 'number' or (type-of($value) == 'string' and str-index($value, 'var(--')) {
      @include breakpoint($key) {
        --column-gap: #{$value};
      }
    } @else if $value {
      @warn 'Make sure that `#{$value}` is a number or a CSS variable in `$column-gap: #{$column-gap}` map.';
    }
  }
}

/// Mixin to output row gap variables.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {variable} row-gap
/// @throws Make sure that `#{$value}` is a number or a CSS variable in `$row-gap: #{$row-gap}` map.
@mixin var-row-gap {
  @each $key, $value in $row-gap {
    @if type-of($value) == 'number' or (type-of($value) == 'string' and str-index($value, 'var(--')) {
      @include breakpoint($key) {
        --row-gap: #{$value};
      }
    } @else if $value {
      @warn 'Make sure that `#{$value}` is a number or a CSS variable in `$row-gap: #{$row-gap}` map.';
    }
  }
}

//*  Private mixins to output grid columns
//   ======================================================================== */

/// Mixin to output grid columns.
/// @access private
/// @requires {variable} column-count
/// @param {String} $suffix [null] - Responsive suffix
@mixin grid-columns($suffix: null) {
  @if type-of($column-count) == 'number' and unitless($column-count) {
    @for $i from 1 through $column-count {
      .o-grid--#{$i}#{$suffix} {
        --grid-column-count: #{$i};
        --grid-column-width: calc(100% / var(--grid-column-count));
      }

      .o-grid__col--#{$i}#{$suffix} {
        --grid-columns: #{$i};
        --grid-column-width: calc(100% * var(--grid-columns) / var(--grid-column-count));
      }

      .o-grid__col--push-#{$i}#{$suffix} {
        --grid-column-offset-width: calc(100% * #{$i} / var(--grid-column-count));
      }

      .o-grid__col--pull-#{$i}#{$suffix} {
        --grid-column-offset-width: calc(-100% * #{$i} / var(--grid-column-count));
      }
    }
  }
}

/// Mixin to output responsive grid columns.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} grid-columns
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-grid-columns {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include grid-columns(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

//*  Private mixins to output utility classes (Helpers)
//   Naming convention based on Atomic CSS : https://acss.io/reference
//   ======================================================================== */

/// Mixin to output position utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin position($suffix: null) {
  .u-pos#{$SEPARATOR_VALUE_START}static#{$SEPARATOR_VALUE_END}#{$suffix} {
    position: static;
  }

  .u-pos#{$SEPARATOR_VALUE_START}relative#{$SEPARATOR_VALUE_END}#{$suffix} {
    position: relative;
  }

  .u-pos#{$SEPARATOR_VALUE_START}absolute#{$SEPARATOR_VALUE_END}#{$suffix} {
    position: absolute;
  }

  .u-pos#{$SEPARATOR_VALUE_START}fixed#{$SEPARATOR_VALUE_END}#{$suffix} {
    position: fixed;
  }

  .u-pos#{$SEPARATOR_VALUE_START}sticky#{$SEPARATOR_VALUE_END}#{$suffix} {
    position: sticky;
  }
}

/// Mixin to output responsive position utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} position
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-position {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include position(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output display utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin display($suffix: null) {
  .u-d#{$SEPARATOR_VALUE_START}inline#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: inline;
  }

  .u-d#{$SEPARATOR_VALUE_START}block#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: block;
  }

  .u-d#{$SEPARATOR_VALUE_START}inline-block#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: inline-block;
  }

  .u-d#{$SEPARATOR_VALUE_START}flex#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: flex;
  }

  .u-d#{$SEPARATOR_VALUE_START}inline-flex#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: inline-flex;
  }

  .u-d#{$SEPARATOR_VALUE_START}grid#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: grid;
  }

  .u-d#{$SEPARATOR_VALUE_START}inline-grid#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: inline-grid;
  }

  .u-d#{$SEPARATOR_VALUE_START}table#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: table;
  }

  .u-d#{$SEPARATOR_VALUE_START}inline-table#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: inline-table;
  }

  .u-d#{$SEPARATOR_VALUE_START}table-row#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: table-row;
  }

  .u-d#{$SEPARATOR_VALUE_START}table-cell#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: table-cell;
  }

  .u-d#{$SEPARATOR_VALUE_START}none#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: none;
  }
}

/// Mixin to output responsive display utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} display
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-display {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include display(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output flex utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin flex($suffix: null) {
  .u-d#{$SEPARATOR_VALUE_START}flex#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: flex;
  }

  .u-d#{$SEPARATOR_VALUE_START}inline-flex#{$SEPARATOR_VALUE_END}#{$suffix} {
    display: inline-flex;
  }

  .u-fxd#{$SEPARATOR_VALUE_START}row#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex-direction: row;
  }

  .u-fxd#{$SEPARATOR_VALUE_START}row-reverse#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex-direction: row-reverse;
  }

  .u-fxd#{$SEPARATOR_VALUE_START}column#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex-direction: column;
  }

  .u-fxd#{$SEPARATOR_VALUE_START}column-reverse#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex-direction: column-reverse;
  }

  .u-fxw#{$SEPARATOR_VALUE_START}nowrap#{$SEPARATOR_VALUE_END}#{$suffix} {
    --grid-row-gap: 0;
    flex-wrap: nowrap;
  }

  .u-fxw#{$SEPARATOR_VALUE_START}wrap#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex-wrap: wrap;
  }

  .u-fxw#{$SEPARATOR_VALUE_START}wrap-reverse#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex-wrap: wrap-reverse;
  }

  .u-jc#{$SEPARATOR_VALUE_START}flex-start#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: flex-start;
  }

  .u-jc#{$SEPARATOR_VALUE_START}flex-end#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: flex-end;
  }

  .u-jc#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: center;
  }

  .u-jc#{$SEPARATOR_VALUE_START}space-between#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: space-between;
  }

  .u-jc#{$SEPARATOR_VALUE_START}space-around#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: space-around;
  }

  .u-jc#{$SEPARATOR_VALUE_START}space-evenly#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: space-evenly;
  }

  .u-ac#{$SEPARATOR_VALUE_START}flex-start#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: flex-start;
  }

  .u-ac#{$SEPARATOR_VALUE_START}flex-end#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: flex-end;
  }

  .u-ac#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: center;
  }

  .u-ac#{$SEPARATOR_VALUE_START}space-between#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: space-between;
  }

  .u-ac#{$SEPARATOR_VALUE_START}space-around#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: space-around;
  }

  .u-ac#{$SEPARATOR_VALUE_START}stretch#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: stretch;
  }

  .u-ai#{$SEPARATOR_VALUE_START}flex-start#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-items: flex-start;
  }

  .u-ai#{$SEPARATOR_VALUE_START}flex-end#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-items: flex-end;
  }

  .u-ai#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-items: center;
  }

  .u-ai#{$SEPARATOR_VALUE_START}baseline#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-items: baseline;
  }

  .u-ai#{$SEPARATOR_VALUE_START}stretch#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-items: stretch;
  }

  .u-as#{$SEPARATOR_VALUE_START}flex-start#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-self: flex-start;
  }

  .u-as#{$SEPARATOR_VALUE_START}flex-end#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-self: flex-end;
  }

  .u-as#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-self: center;
  }

  .u-as#{$SEPARATOR_VALUE_START}baseline#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-self: baseline;
  }

  .u-as#{$SEPARATOR_VALUE_START}stretch#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-self: stretch;
  }

  .u-fx#{$SEPARATOR_VALUE_START}initial#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex: initial;
  }

  .u-fx#{$SEPARATOR_VALUE_START}auto#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex: auto;
  }

  .u-fx#{$SEPARATOR_VALUE_START}1#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex: 1;
  }

  .u-fx#{$SEPARATOR_VALUE_START}none#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex: none;
  }

  .u-fxg#{$SEPARATOR_VALUE_START}1#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex-grow: 1;
  }

  .u-fxg#{$SEPARATOR_VALUE_START}0#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex-grow: 0;
  }

  .u-fxs#{$SEPARATOR_VALUE_START}1#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex-shrink: 1;
  }

  .u-fxs#{$SEPARATOR_VALUE_START}0#{$SEPARATOR_VALUE_END}#{$suffix} {
    flex-shrink: 0;
  }

  .u-or#{$SEPARATOR_VALUE_START}-1#{$SEPARATOR_VALUE_END}#{$suffix} {
    order: -1;
  }

  .u-or#{$SEPARATOR_VALUE_START}0#{$SEPARATOR_VALUE_END}#{$suffix} {
    order: 0;
  }

  .u-or#{$SEPARATOR_VALUE_START}1#{$SEPARATOR_VALUE_END}#{$suffix} {
    order: 1;
  }
}

/// Mixin to output responsive flex utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} flex
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-flex {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include flex(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output alignment utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin alignment($suffix: null) {
  .u-jc#{$SEPARATOR_VALUE_START}start#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: start;
  }

  .u-jc#{$SEPARATOR_VALUE_START}end#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: end;
  }

  .u-jc#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: center;
  }

  .u-jc#{$SEPARATOR_VALUE_START}space-between#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: space-between;
  }

  .u-jc#{$SEPARATOR_VALUE_START}space-around#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: space-around;
  }

  .u-jc#{$SEPARATOR_VALUE_START}space-evenly#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: space-evenly;
  }

  .u-jc#{$SEPARATOR_VALUE_START}stretch#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-content: stretch;
  }

  .u-ac#{$SEPARATOR_VALUE_START}start#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: start;
  }

  .u-ac#{$SEPARATOR_VALUE_START}end#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: end;
  }

  .u-ac#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: center;
  }

  .u-ac#{$SEPARATOR_VALUE_START}baseline#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: baseline;
  }

  .u-ac#{$SEPARATOR_VALUE_START}space-between#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: space-between;
  }

  .u-ac#{$SEPARATOR_VALUE_START}space-around#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: space-around;
  }

  .u-ac#{$SEPARATOR_VALUE_START}space-evenly#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: space-evenly;
  }

  .u-ac#{$SEPARATOR_VALUE_START}stretch#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-content: stretch;
  }

  .u-ji#{$SEPARATOR_VALUE_START}start#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-items: start;
  }

  .u-ji#{$SEPARATOR_VALUE_START}end#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-items: end;
  }

  .u-ji#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-items: center;
  }

  .u-ji#{$SEPARATOR_VALUE_START}baseline#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-items: baseline;
  }

  .u-ji#{$SEPARATOR_VALUE_START}stretch#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-items: stretch;
  }

  .u-ai#{$SEPARATOR_VALUE_START}start#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-items: start;
  }

  .u-ai#{$SEPARATOR_VALUE_START}end#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-items: end;
  }

  .u-ai#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-items: center;
  }

  .u-ai#{$SEPARATOR_VALUE_START}baseline#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-items: baseline;
  }

  .u-ai#{$SEPARATOR_VALUE_START}stretch#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-items: stretch;
  }

  .u-js#{$SEPARATOR_VALUE_START}start#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-self: start;
  }

  .u-js#{$SEPARATOR_VALUE_START}end#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-self: end;
  }

  .u-js#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-self: center;
  }

  .u-js#{$SEPARATOR_VALUE_START}baseline#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-self: baseline;
  }

  .u-js#{$SEPARATOR_VALUE_START}stretch#{$SEPARATOR_VALUE_END}#{$suffix} {
    justify-self: stretch;
  }

  .u-as#{$SEPARATOR_VALUE_START}start#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-self: start;
  }

  .u-as#{$SEPARATOR_VALUE_START}end#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-self: end;
  }

  .u-as#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-self: center;
  }

  .u-as#{$SEPARATOR_VALUE_START}baseline#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-self: baseline;
  }

  .u-as#{$SEPARATOR_VALUE_START}stretch#{$SEPARATOR_VALUE_END}#{$suffix} {
    align-self: stretch;
  }
}

/// Mixin to output responsive alignment utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} alignment
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-alignment {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include alignment(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output float utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin float($suffix: null) {
  .u-fl#{$SEPARATOR_VALUE_START}left#{$SEPARATOR_VALUE_END}#{$suffix} {
    float: left;
  }

  .u-fl#{$SEPARATOR_VALUE_START}right#{$SEPARATOR_VALUE_END}#{$suffix} {
    float: right;
  }

  .u-fl#{$SEPARATOR_VALUE_START}none#{$SEPARATOR_VALUE_END}#{$suffix} {
    float: none;
  }
}

/// Mixin to output responsive float utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} float
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-float {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include float(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output clear utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin clear($suffix: null) {
  .u-cl#{$SEPARATOR_VALUE_START}left#{$SEPARATOR_VALUE_END}#{$suffix} {
    clear: left;
  }

  .u-cl#{$SEPARATOR_VALUE_START}right#{$SEPARATOR_VALUE_END}#{$suffix} {
    clear: right;
  }

  .u-cl#{$SEPARATOR_VALUE_START}both#{$SEPARATOR_VALUE_END}#{$suffix} {
    clear: both;
  }

  .u-cl#{$SEPARATOR_VALUE_START}none#{$SEPARATOR_VALUE_END}#{$suffix} {
    clear: none;
  }
}

/// Mixin to output responsive clear utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} clear
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-clear {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include clear(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output sizing utilities.
/// @access private
/// @requires {variable} sizes
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin sizing($suffix: null) {
  @each $key, $value in $sizes {
    @if type-of($value) == 'number' or $value == 'auto' or (type-of($value) == 'string' and str-index($value, 'var(--'))
    {
      .u-w#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        width: var(--size-#{$key});
      }

      .u-h#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        height: var(--size-#{$key});
      }
    }
  }
}

/// Mixin to output responsive sizing utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} sizing
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-sizing {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include sizing(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output spacing utilities.
/// @access private
/// @requires {variable} spacers
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin spacing($suffix: null) {
  @each $key, $value in $spacers {
    @if type-of($value) == 'number' or $value == 'auto' or (type-of($value) == 'string' and str-index($value, 'var(--'))
    {
      .u-m#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        margin: var(--spacer-#{$key});
      }

      .u-mx#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        margin-right: var(--spacer-#{$key});
        margin-left: var(--spacer-#{$key});
      }

      .u-my#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        margin-top: var(--spacer-#{$key});
        margin-bottom: var(--spacer-#{$key});
      }

      .u-mt#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        margin-top: var(--spacer-#{$key});
      }

      .u-mr#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        margin-right: var(--spacer-#{$key});
      }

      .u-mb#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        margin-bottom: var(--spacer-#{$key});
      }

      .u-ml#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        margin-left: var(--spacer-#{$key});
      }

      @if type-of($value) == 'number' or (type-of($value) == 'string' and str-index($value, 'var(--')) {
        .u-p#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
          padding: var(--spacer-#{$key});
        }

        .u-px#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
          padding-right: var(--spacer-#{$key});
          padding-left: var(--spacer-#{$key});
        }

        .u-py#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
          padding-top: var(--spacer-#{$key});
          padding-bottom: var(--spacer-#{$key});
        }

        .u-pt#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
          padding-top: var(--spacer-#{$key});
        }

        .u-pr#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
          padding-right: var(--spacer-#{$key});
        }

        .u-pb#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
          padding-bottom: var(--spacer-#{$key});
        }

        .u-pl#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
          padding-left: var(--spacer-#{$key});
        }
      }
    }
  }
}

/// Mixin to output responsive spacing utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} spacing
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-spacing {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include spacing(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output overflow utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin overflow($suffix: null) {
  .u-ov#{$SEPARATOR_VALUE_START}visible#{$SEPARATOR_VALUE_END}#{$suffix} {
    overflow: visible;
  }

  .u-ov#{$SEPARATOR_VALUE_START}hidden#{$SEPARATOR_VALUE_END}#{$suffix} {
    overflow: hidden;
  }

  .u-ov#{$SEPARATOR_VALUE_START}scroll#{$SEPARATOR_VALUE_END}#{$suffix} {
    overflow: scroll;
  }

  .u-ov#{$SEPARATOR_VALUE_START}auto#{$SEPARATOR_VALUE_END}#{$suffix} {
    overflow: auto;
  }
}

/// Mixin to output responsive overflow utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} overflow
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-overflow {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include overflow(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output color utilities.
/// @access private
/// @requires {variable} colors
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin colors($suffix: null) {
  @each $key, $value in $colors {
    @if type-of($value) == 'color' or (type-of($value) == 'string' and str-index($value, 'var(--')) {
      .u-c#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        color: var(--color-#{$key});
      }
    }
  }
}

/// Mixin to output responsive color utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} colors
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-colors {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include colors(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output background color utilities.
/// @access private
/// @requires {variable} colors
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin background-colors($suffix: null) {
  @each $key, $value in $colors {
    @if type-of($value) == 'color' or (type-of($value) == 'string' and str-index($value, 'var(--')) {
      .u-bgc#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        background-color: var(--color-#{$key});
      }
    }
  }
}

/// Mixin to output responsive background color utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} background-colors
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-background-colors {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include background-colors(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output font weight utilities.
/// @access private
/// @requires {variable} font-weights
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin font-weights($suffix: null) {
  @each $key, $value in $font-weights {
    @if type-of($value) == 'number' or (type-of($value) == 'string' and str-index($value, 'var(--')) {
      .u-fw#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        font-weight: var(--font-weight-#{$key});
      }
    }
  }
}

/// Mixin to output responsive font weight utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} font-weights
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-font-weights {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include font-weights(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output font size utilities.
/// @access private
/// @requires {variable} font-sizes
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin font-sizes($suffix: null) {
  @each $key, $value in $font-sizes {
    @if type-of($value) ==
      'number' or
      (type-of($value) == 'string' and str-index($value, 'var(--')) or
      type-of($value) ==
      'list' or
      type-of($value) ==
      'map'
    {
      .u-fz#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        font-size: var(--font-size-#{$key});
        line-height: var(--line-height-#{$key});
      }
    }
  }
}

/// Mixin to output responsive font size utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} font-sizes
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-font-sizes {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include font-sizes(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output font family utilities.
/// @access private
/// @requires {variable} font-families
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin font-families($suffix: null) {
  @each $key, $value in $font-families {
    @if type-of($value) == 'string' {
      .u-ff#{$SEPARATOR_VALUE_START}#{$key}#{$SEPARATOR_VALUE_END}#{$suffix} {
        font-family: var(--font-family-#{$key});
      }
    }
  }
}

/// Mixin to output responsive font family utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} font-families
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-font-families {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include font-families(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output text alignment utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin text-alignment($suffix: null) {
  .u-ta#{$SEPARATOR_VALUE_START}left#{$SEPARATOR_VALUE_END}#{$suffix} {
    text-align: left;
  }

  .u-ta#{$SEPARATOR_VALUE_START}right#{$SEPARATOR_VALUE_END}#{$suffix} {
    text-align: right;
  }

  .u-ta#{$SEPARATOR_VALUE_START}center#{$SEPARATOR_VALUE_END}#{$suffix} {
    text-align: center;
  }

  .u-ta#{$SEPARATOR_VALUE_START}justify#{$SEPARATOR_VALUE_END}#{$suffix} {
    text-align: justify;
  }
}

/// Mixin to output responsive text alignment utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} text-alignment
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-text-alignment {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include text-alignment(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output text transform utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin text-transform($suffix: null) {
  .u-tt#{$SEPARATOR_VALUE_START}lowercase#{$SEPARATOR_VALUE_END}#{$suffix} {
    text-transform: lowercase;
  }

  .u-tt#{$SEPARATOR_VALUE_START}uppercase#{$SEPARATOR_VALUE_END}#{$suffix} {
    text-transform: uppercase;
  }

  .u-tt#{$SEPARATOR_VALUE_START}capitalize#{$SEPARATOR_VALUE_END}#{$suffix} {
    text-transform: capitalize;
  }

  .u-tt#{$SEPARATOR_VALUE_START}none#{$SEPARATOR_VALUE_END}#{$suffix} {
    text-transform: none;
  }
}

/// Mixin to output responsive text transform utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} text-transform
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-text-transform {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include text-transform(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output vertical alignment utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin vertical-alignment($suffix: null) {
  .u-va#{$SEPARATOR_VALUE_START}baseline#{$SEPARATOR_VALUE_END}#{$suffix} {
    vertical-align: baseline;
  }

  .u-va#{$SEPARATOR_VALUE_START}top#{$SEPARATOR_VALUE_END}#{$suffix} {
    vertical-align: top;
  }

  .u-va#{$SEPARATOR_VALUE_START}bottom#{$SEPARATOR_VALUE_END}#{$suffix} {
    vertical-align: bottom;
  }

  .u-va#{$SEPARATOR_VALUE_START}middle#{$SEPARATOR_VALUE_END}#{$suffix} {
    vertical-align: middle;
  }

  .u-va#{$SEPARATOR_VALUE_START}text-top#{$SEPARATOR_VALUE_END}#{$suffix} {
    vertical-align: text-top;
  }

  .u-va#{$SEPARATOR_VALUE_START}text-bottom#{$SEPARATOR_VALUE_END}#{$suffix} {
    vertical-align: text-bottom;
  }

  .u-va#{$SEPARATOR_VALUE_START}sub#{$SEPARATOR_VALUE_END}#{$suffix} {
    vertical-align: sub;
  }

  .u-va#{$SEPARATOR_VALUE_START}super#{$SEPARATOR_VALUE_END}#{$suffix} {
    vertical-align: super;
  }
}

/// Mixin to output responsive vertical alignment utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} vertical-alignment
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-vertical-alignment {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include vertical-alignment(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output visibility utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin visibility($suffix: null) {
  .u-v#{$SEPARATOR_VALUE_START}visible#{$SEPARATOR_VALUE_END}#{$suffix} {
    visibility: visible;
  }

  .u-v#{$SEPARATOR_VALUE_START}hidden#{$SEPARATOR_VALUE_END}#{$suffix} {
    visibility: hidden;
  }
}

/// Mixin to output responsive visibility utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} visibility
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-visibility {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include visibility(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output cursor utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin cursors($suffix: null) {
  .u-cur#{$SEPARATOR_VALUE_START}auto#{$SEPARATOR_VALUE_END}#{$suffix} {
    cursor: auto;
  }

  .u-cur#{$SEPARATOR_VALUE_START}pointer#{$SEPARATOR_VALUE_END}#{$suffix} {
    cursor: pointer;
  }
}

/// Mixin to output responsive cursor utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} cursors
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-cursors {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include cursors(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output reset utilities.
/// @access private
/// @requires {variable} SEPARATOR_VALUE_START
/// @requires {variable} SEPARATOR_VALUE_END
/// @param {String} $suffix [null] - Responsive suffix
@mixin reset($suffix: null) {
  .u-res#{$SEPARATOR_VALUE_START}link#{$SEPARATOR_VALUE_END}#{$suffix} {
    color: inherit;
    text-decoration: none;
  }

  .u-res#{$SEPARATOR_VALUE_START}list#{$SEPARATOR_VALUE_END}#{$suffix} {
    padding-left: 0;
    list-style: none;
  }

  .u-res#{$SEPARATOR_VALUE_START}button#{$SEPARATOR_VALUE_END}#{$suffix} {
    padding: 0;
    color: inherit;
    font: inherit;
    letter-spacing: inherit;
    text-align: inherit;
    background-color: transparent;
    border: 0;
  }
}

/// Mixin to output responsive reset utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} reset
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-reset {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include reset(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

/// Mixin to output helper utilities.
/// @access private
/// @param {String} $suffix [null] - Responsive suffix
@mixin helper($suffix: null) {
  .u-cf#{$suffix} {
    &::after {
      display: table;
      clear: both;
      content: '';
    }
  }

  .u-ell#{$suffix} {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .u-hidden#{$suffix} {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    overflow: hidden;
    white-space: nowrap;
    border: 0;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
  }

  .u-h1#{$suffix} {
    font-size: var(--font-size-h1);
    line-height: var(--line-height-h1);
  }

  .u-h2#{$suffix} {
    font-size: var(--font-size-h2);
    line-height: var(--line-height-h2);
  }

  .u-h3#{$suffix} {
    font-size: var(--font-size-h3);
    line-height: var(--line-height-h3);
  }

  .u-h4#{$suffix} {
    font-size: var(--font-size-h4);
    line-height: var(--line-height-h4);
  }

  .u-h5#{$suffix} {
    font-size: var(--font-size-h5);
    line-height: var(--line-height-h5);
  }

  .u-h6#{$suffix} {
    font-size: var(--font-size-h6);
    line-height: var(--line-height-h6);
  }
}

/// Mixin to output responsive helper utilities.
/// @access private
/// @requires {mixin} breakpoint
/// @requires {mixin} helper
/// @requires {variable} breakpoints
/// @requires {variable} SEPARATOR_MEDIA
@mixin responsive-helper {
  @each $key, $value in $breakpoints {
    @include breakpoint($key) {
      @include helper(#{$SEPARATOR_MEDIA}#{$key});
    }
  }
}

//*  Public mixins
//   ======================================================================== */

/// Mixin to output media queries.
/// @access public
/// @requires {mixin} breakpoint
/// @param {ArgList} $keys - Breakpoint key(s)
@mixin media($keys...) {
  @each $value in $keys {
    @include breakpoint($value) {
      @content;
    }
  }
}
